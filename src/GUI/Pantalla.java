/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package GUI;

import Logica.java.Estructuras.Cola;
import Logica.java.Estructuras.List;
import Logica.java.Estructuras.Nodo;
import Logica.java.Process_Image;
import Logica.java.Scheduler;
import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.Reader;
import java.util.concurrent.Semaphore;
import java.util.concurrent.atomic.AtomicInteger;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;

/**
 *
 * @author carlo_7ogoiii
 */
public class Pantalla extends javax.swing.JFrame {

    /**
     * Creates new form Pantalla
     */
    private List listaCPU;

    DefaultListModel cpu1 = new DefaultListModel();
    DefaultListModel cpu2 = new DefaultListModel();
    DefaultListModel cpu3 = new DefaultListModel();
    private List lista;

    public Pantalla() {

        initComponents();
        listCPU1.setModel(cpu1);
        listCPU2.setModel(cpu2);
        listCPU3.setModel(cpu3);

        this.lista = new List("LISTICA");
        

    }

    private void llenarLista() {
        Process_Image procesonuevo1 = new Process_Image("Proceso 1", 6);
        Process_Image procesonuevo2 = new Process_Image("Proceso 2", 8, 2, 3);
        Process_Image procesonuevo3 = new Process_Image("Proceso 3", 7);
        Process_Image procesonuevo4 = new Process_Image("Proceso 4", 8);
        Process_Image procesonuevo5 = new Process_Image("Proceso 5", 4, 2, 3);
        Process_Image procesonuevo45 = new Process_Image("Proceso 4,5", 9, 6, 7);

        this.lista.insertFirst(procesonuevo1);
        this.lista.insertFirst(procesonuevo2);
        this.lista.insertFirst(procesonuevo3);
        this.lista.insertFirst(procesonuevo4);
        this.lista.insertFirst(procesonuevo5);

        this.lista.insert(procesonuevo45, this.lista.find("Proceso 5"));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        CrearProceso = new javax.swing.JPanel();
        txtDuracion = new javax.swing.JLabel();
        txtDuracion.setVisible(false);
        fieldCiclos = new javax.swing.JTextField();
        txtCiclo2 = new javax.swing.JLabel();
        txtNombre = new javax.swing.JLabel();
        txtCiclo1 = new javax.swing.JLabel();
        txtCiclo1.setVisible(false);
        fieldNombre = new javax.swing.JTextField();
        fieldNombre.setVisible(false);
        fieldDuracion = new javax.swing.JTextField();
        fieldDuracion.setVisible(false);
        txtCrearProceso = new javax.swing.JLabel();
        txtCiclo3 = new javax.swing.JLabel();
        txtCiclo4 = new javax.swing.JLabel();
        txtCiclo4.setVisible(false);
        fieldCiclos2 = new javax.swing.JTextField();
        opcion1 = new javax.swing.JButton();
        opcion2 = new javax.swing.JButton();
        botonCrear = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        button_loadFile = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        fileChooserStateMessage = new javax.swing.JTextPane();
        fieldinstructionCycle = new javax.swing.JTextField();
        fieldactiveCPU = new javax.swing.JTextField();
        txtinstructionCycle = new javax.swing.JLabel();
        botonConfirmarValores = new javax.swing.JButton();
        txtActiveCPU1 = new javax.swing.JLabel();
        BtnCargarProcesos = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        listCPU1 = new javax.swing.JList<>();
        txtCPU1 = new javax.swing.JLabel();
        txtCPU2 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        listCPU2 = new javax.swing.JList<>();
        txtCPU3 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        listCPU3 = new javax.swing.JList<>();
        BtnIniciarSimulacion = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        CrearProceso.setLayout(null);

        txtDuracion.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        txtDuracion.setText("Duración:");
        CrearProceso.add(txtDuracion);
        txtDuracion.setBounds(260, 150, 101, 32);

        fieldCiclos.setVisible(false);
        fieldCiclos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fieldCiclosActionPerformed(evt);
            }
        });
        CrearProceso.add(fieldCiclos);
        fieldCiclos.setBounds(380, 220, 251, 36);

        txtCiclo2.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        txtCiclo2.setText("una interrupción:");
        txtCiclo2.setVisible(false);
        CrearProceso.add(txtCiclo2);
        txtCiclo2.setBounds(180, 220, 182, 50);

        txtNombre.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        txtNombre.setText("Nombre:");
        txtNombre.setVisible(false);
        CrearProceso.add(txtNombre);
        txtNombre.setBounds(270, 90, 100, 32);

        txtCiclo1.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        txtCiclo1.setText("Ciclos para generar");
        CrearProceso.add(txtCiclo1);
        txtCiclo1.setBounds(160, 200, 204, 32);

        fieldNombre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fieldNombreActionPerformed(evt);
            }
        });
        CrearProceso.add(fieldNombre);
        fieldNombre.setBounds(380, 90, 251, 35);

        fieldDuracion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fieldDuracionActionPerformed(evt);
            }
        });
        CrearProceso.add(fieldDuracion);
        fieldDuracion.setBounds(380, 150, 251, 35);

        txtCrearProceso.setFont(new java.awt.Font("Segoe UI", 3, 48)); // NOI18N
        txtCrearProceso.setText("Crear un proceso");
        CrearProceso.add(txtCrearProceso);
        txtCrearProceso.setBounds(260, 0, 390, 64);

        txtCiclo3.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        txtCiclo3.setText("Ciclos para satisfacer");
        txtCiclo3.setVisible(false);
        CrearProceso.add(txtCiclo3);
        txtCiclo3.setBounds(150, 270, 220, 30);

        txtCiclo4.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        txtCiclo4.setText("una interrupción:");
        CrearProceso.add(txtCiclo4);
        txtCiclo4.setBounds(180, 300, 182, 32);

        fieldCiclos2.setVisible(false);
        fieldCiclos2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fieldCiclos2ActionPerformed(evt);
            }
        });
        CrearProceso.add(fieldCiclos2);
        fieldCiclos2.setBounds(380, 290, 251, 38);

        opcion1.setText("CPU Bound");
        opcion1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                opcion1ActionPerformed(evt);
            }
        });
        CrearProceso.add(opcion1);
        opcion1.setBounds(720, 90, 160, 50);

        opcion2.setText("I/O Bound");
        opcion2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                opcion2ActionPerformed(evt);
            }
        });
        CrearProceso.add(opcion2);
        opcion2.setBounds(720, 170, 160, 50);

        botonCrear.setText("Crear");
        botonCrear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonCrearActionPerformed(evt);
            }
        });
        CrearProceso.add(botonCrear);
        botonCrear.setBounds(550, 350, 76, 27);

        jTabbedPane1.addTab("Crear proceso", CrearProceso);

        jPanel2.setLayout(null);

        button_loadFile.setText("Cargar  Archivo");
        button_loadFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_loadFileActionPerformed(evt);
            }
        });
        jPanel2.add(button_loadFile);
        button_loadFile.setBounds(738, 118, 139, 44);

        fileChooserStateMessage.setEditable(false);
        fileChooserStateMessage.setText("Cargue los parámetros iniciales de la simulación.");
        jScrollPane2.setViewportView(fileChooserStateMessage);

        jPanel2.add(jScrollPane2);
        jScrollPane2.setBounds(730, 180, 159, 26);

        fieldinstructionCycle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fieldinstructionCycleActionPerformed(evt);
            }
        });
        jPanel2.add(fieldinstructionCycle);
        fieldinstructionCycle.setBounds(440, 80, 68, 24);

        fieldactiveCPU.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fieldactiveCPUActionPerformed(evt);
            }
        });
        jPanel2.add(fieldactiveCPU);
        fieldactiveCPU.setBounds(440, 150, 68, 24);

        txtinstructionCycle.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        txtinstructionCycle.setText("Duración del Ciclo de la Instrucción:");
        jPanel2.add(txtinstructionCycle);
        txtinstructionCycle.setBounds(40, 70, 387, 32);

        botonConfirmarValores.setText("Confirmar Valores");
        botonConfirmarValores.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonConfirmarValoresActionPerformed(evt);
            }
        });
        jPanel2.add(botonConfirmarValores);
        botonConfirmarValores.setBounds(819, 391, 129, 27);

        txtActiveCPU1.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        txtActiveCPU1.setText("Cantidad de Procesadores Activos:");
        jPanel2.add(txtActiveCPU1);
        txtActiveCPU1.setBounds(40, 140, 387, 32);

        BtnCargarProcesos.setText("Cargar procesos");
        BtnCargarProcesos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnCargarProcesosActionPerformed(evt);
            }
        });
        jPanel2.add(BtnCargarProcesos);
        BtnCargarProcesos.setBounds(50, 377, 160, 40);

        jTabbedPane1.addTab("tab2", jPanel2);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 314, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 150, Short.MAX_VALUE)
        );

        jScrollPane1.setViewportView(listCPU1);

        txtCPU1.setText("CPU 1");

        txtCPU2.setText("CPU 2");

        jScrollPane3.setViewportView(listCPU2);

        txtCPU3.setText("CPU 3");

        jScrollPane4.setViewportView(listCPU3);

        BtnIniciarSimulacion.setText("Iniciar");
        BtnIniciarSimulacion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnIniciarSimulacionActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(88, 88, 88)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtCPU3, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtCPU1, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(57, 57, 57)
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtCPU2, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap(314, Short.MAX_VALUE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(BtnIniciarSimulacion)
                        .addGap(156, 156, 156))))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(txtCPU2)
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel3Layout.createSequentialGroup()
                            .addGap(14, 14, 14)
                            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(jPanel3Layout.createSequentialGroup()
                            .addGap(50, 50, 50)
                            .addComponent(txtCPU1)
                            .addGap(18, 18, 18)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(18, 18, 18)
                .addComponent(txtCPU3)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(81, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(BtnIniciarSimulacion)
                        .addGap(61, 61, 61))))
        );

        jTabbedPane1.addTab("tab3", jPanel3);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void fieldCiclosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fieldCiclosActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_fieldCiclosActionPerformed

    private void fieldNombreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fieldNombreActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_fieldNombreActionPerformed

    private void fieldDuracionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fieldDuracionActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_fieldDuracionActionPerformed

    private void fieldCiclos2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fieldCiclos2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_fieldCiclos2ActionPerformed

    private void opcion1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_opcion1ActionPerformed
        txtNombre.setVisible(true);
        txtDuracion.setVisible(true);
        fieldDuracion.setVisible(true);
        fieldNombre.setVisible(true);
        txtCiclo1.setVisible(false);
        txtCiclo2.setVisible(false);
        txtCiclo3.setVisible(false);
        txtCiclo4.setVisible(false);
        fieldCiclos.setVisible(false);
        fieldCiclos2.setVisible(false);

        fieldCiclos.setText("");
        fieldCiclos2.setText("");

    }//GEN-LAST:event_opcion1ActionPerformed

    private void opcion2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_opcion2ActionPerformed
        txtNombre.setVisible(true);
        txtDuracion.setVisible(true);
        fieldDuracion.setVisible(true);
        fieldNombre.setVisible(true);
        txtCiclo1.setVisible(true);
        txtCiclo2.setVisible(true);
        txtCiclo3.setVisible(true);
        txtCiclo4.setVisible(true);
        fieldCiclos.setVisible(true);
        fieldCiclos2.setVisible(true);
    }//GEN-LAST:event_opcion2ActionPerformed

    private void botonCrearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonCrearActionPerformed

        try {
            // Obtener los valores de los campos
            String nombre = fieldNombre.getText();
            String duracionStr = fieldDuracion.getText();
            String ciclo1Str = fieldCiclos.getText();
            String ciclo2Str = fieldCiclos2.getText();

            // Validar que los campos obligatorios no estén vacíos
            if (nombre.isEmpty() || duracionStr.isEmpty()) {
                throw new IllegalArgumentException("Error, debe llenar los campos Nombre y Duración.");
            }

            // Validar si se llenaron los campos opcionales
            boolean ciclosLlenos = !ciclo1Str.isEmpty() && !ciclo2Str.isEmpty();

            // Validar las combinaciones permitidas
            if (!ciclosLlenos && (nombre.isEmpty() || duracionStr.isEmpty())) {
                throw new IllegalArgumentException("Error, debe llenar Nombre y Duración, o los.");
            }

            if ((nombre.isEmpty() || duracionStr.isEmpty()) && (ciclo1Str.isEmpty() || ciclo2Str.isEmpty())) {
                throw new IllegalArgumentException("Error, debe llenar Nombre y Duración, o .");
            }

            // Convertir a enteros y validar que sean mayores a 0
            int duracion = validarEnteroMayorCero(duracionStr, "Duración");
            int ciclo1 = 0;
            int ciclo2 = 0;

            if (ciclosLlenos) {
                ciclo1 = validarEnteroMayorCero(ciclo1Str, "Ciclos para generar una interrupción");
                ciclo2 = validarEnteroMayorCero(ciclo2Str, "Ciclos para satisfacer una interrupción");
            }

            // ... (Aquí iría el código para guardar los datos) ...
            
            
            if(ciclo1 > 0 && ciclo2 > 0){
                Process_Image proceso = new Process_Image(nombre, duracion, ciclo1, ciclo2);
                lista.insertFirst(proceso);
                escribirEnJson();
            }
            else{
                Process_Image proceso = new Process_Image(nombre, duracion);
                lista.insertFirst(proceso);
                escribirEnJson();
            }
            
            
            
            
        } catch (IllegalArgumentException e) {
            JOptionPane.showMessageDialog(this, e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private int validarEnteroMayorCero(String valor, String nombreCampo) {
        try {
            int numero = Integer.parseInt(valor);
            if (numero <= 0) {
                throw new IllegalArgumentException("Error, el campo " + nombreCampo + " debe ser un número entero mayor a 0.");
            }
            return numero;
        } catch (NumberFormatException e) {
            throw new IllegalArgumentException("Error, el campo " + nombreCampo + " debe ser un número entero.");
        }
    }//GEN-LAST:event_botonCrearActionPerformed

    private void button_loadFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_loadFileActionPerformed


    }//GEN-LAST:event_button_loadFileActionPerformed


    private void fieldinstructionCycleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fieldinstructionCycleActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_fieldinstructionCycleActionPerformed

    private void fieldactiveCPUActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fieldactiveCPUActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_fieldactiveCPUActionPerformed

    private void botonConfirmarValoresActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonConfirmarValoresActionPerformed


    }//GEN-LAST:event_botonConfirmarValoresActionPerformed

    private void escribirEnJson(){
        
        /*
        FALTA GUARDAR LOS ATRIBUTOS DE LA SIMULACION
        */
        
        JsonArray colalistosArray = new JsonArray();
        List listaJson = this.lista;
        for (int i = 0; i < listaJson.size(); i++) {
            Process_Image proceso = listaJson.findProcessImageByIndex(i);
            
            JsonObject processJson = new JsonObject();
            
            processJson.addProperty("nombre", proceso.getProcess_name());
            processJson.addProperty("processlenght", proceso.getProcess_length());
            processJson.addProperty("consumption_category", proceso.getConsumption_category());
            
            if (proceso.getConsumption_category().equals("I/O Bound")) {
                processJson.addProperty("exceptionRequirement", proceso.getExceptionRequirement());
                processJson.addProperty("exceptionCoverage", proceso.getExceptionCoverage());
            }
            
            colalistosArray.add(processJson);
            
        }
        
        JsonObject raiz = new JsonObject();
        raiz.add("colalistos", colalistosArray);
        
        try (FileWriter writer = new FileWriter("Simulacion.json")){
            writer.write(raiz.toString());
            System.out.println("DATIOSSSSS");
        } catch (Exception e) {
        }
                
        
        
        
    }
    
    private void BtnIniciarSimulacionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnIniciarSimulacionActionPerformed


        Gson gson = new Gson();

        try (Reader lector = new FileReader("Simulacion.json")) {
            JsonObject root = gson.fromJson(lector, JsonObject.class);

            // GUARDADO COLA DE LISTOS
            JsonArray colalistosArray = root.getAsJsonArray("colalistos");

            // METODO PARA LIMPIAR LA COLA DE LISTOS falta
            // LEEMOS CADA OBJETO JSON PARA OBTENER SU VALOR
            for (JsonElement element : colalistosArray) {
                JsonObject procesoJson = element.getAsJsonObject();
                String processName = procesoJson.get("nombre").getAsString();
                int processLenght = procesoJson.get("processlenght").getAsInt();
                String consumption_category = procesoJson.get("consumption_category").getAsString();
                // DATOS PCB
//                String namePCB = procesoJson.get("NombrePCB").getAsString();
//                String statusPCB = procesoJson.get("statusPCB").getAsString();
//                int pcPCB = procesoJson.get("pcPCB").getAsInt();
//                int marPCB = procesoJson.get("marPCB").getAsInt();

                Process_Image proceso = null;

                if (consumption_category.equals("I/O Bound")) {
                    // PARA LA PARTE DE CREACION DE PROCESO
                    int exceptionRequirement = procesoJson.get("exceptionRequirement").getAsInt();
                    int exceptionCoverage = procesoJson.get("exceptionCoverage").getAsInt();

                    proceso = new Process_Image(processName, processLenght, exceptionRequirement, exceptionCoverage);
                } else {
                    proceso = new Process_Image(processName, processLenght);
                }

                if (proceso != null) {
                    this.lista.insertFirst(proceso);
                    System.out.println("PROCESOS LEIDOS!!!");
                }

            }

        } catch (Exception e) {
        }

        AtomicInteger tiempoInstruccion = new AtomicInteger(1500); // Esto es el tiempo que tardará cada ciclo de reloj
        AtomicInteger planificacion = new AtomicInteger(2);    // Esto es la política de planificación

        //Estas son las colas de listos y bloqueados
        Cola colaR = new Cola("Ready");
        List colaB = new List("Blocked");

        Semaphore soS = new Semaphore(1);  // Esto es un semáforo para acceder a la sección crítica del SO

        Scheduler scheduler = new Scheduler(colaB, colaR, soS, planificacion);  // Esto crea al scheduler

        // Esta es la creación de la lista de CPU y de cada CPU
        List listaCPU = new List("Lista CPU");
        Nodo Cpu1 = new Nodo(null);
        Nodo Cpu2 = new Nodo(null);
        Nodo Cpu3 = new Nodo(null);
        listaCPU.insertFirst(Cpu3);
        listaCPU.insertFirst(Cpu2);
        listaCPU.insertFirst(Cpu1);

        UpdateView actualizarPantalla = new UpdateView(cpu1, cpu2, cpu3, listaCPU, tiempoInstruccion);

        //Esta es la creación de los procesos a partir de sus imágenes
        Logica.java.Process proceso1 = new Logica.java.Process(lista.findPCB("Proceso 1"), tiempoInstruccion, scheduler, null, planificacion);
//        Logica.java.Process proceso5 = new Logica.java.Process(lista.findPCB("Proceso 5"), tiempoInstruccion, scheduler, null, planificacion);
        Logica.java.Process proceso2 = new Logica.java.Process(lista.findPCB("Proceso 2"), tiempoInstruccion, scheduler, null, planificacion);
        Logica.java.Process proceso3 = new Logica.java.Process(lista.findPCB("Proceso 3"), tiempoInstruccion, scheduler, null, planificacion);
        Logica.java.Process proceso4 = new Logica.java.Process(lista.findPCB("Proceso 4"), tiempoInstruccion, scheduler, null, planificacion);
//        Logica.java.Process proceso45 = new Logica.java.Process(lista.findPCB("Proceso 4,5"), tiempoInstruccion, scheduler, null, planificacion);

        //Esta es una lista de los procesos
        List listaProcesos = new List("Lista de procesos");
        listaProcesos.insertFirst(proceso1);
//        listaProcesos.insertFirst(proceso5);
        listaProcesos.insertFirst(proceso2);
        listaProcesos.insertFirst(proceso3);
        listaProcesos.insertFirst(proceso4);
//        listaProcesos.insertFirst(proceso45);

        // Esto es un for para iniciar cada proceso, se encolaran automaticamente porque se inicializan en "ready"
        for (int j = 0; j < listaProcesos.size(); j++) {
            listaProcesos.findProcessByIndex(j).start();
        }

        // Esto es para que cuando hayan suficientes procesos listos, se asignen
        while (colaR.getSize() < listaProcesos.size()) {
            ;
        }

        // Acá asignas los procesos a un Cpu
        for (int i = 0; i < listaCPU.size(); i++) {
            Nodo cpu = listaCPU.findByIndex(i);
            Logica.java.Process proceso = colaR.desencolarProceso();
            cpu.setData(proceso);
            proceso.setCpu(cpu);
            proceso.getPcb().setStatus("Running");

        }

        actualizarPantalla.start();


    }//GEN-LAST:event_BtnIniciarSimulacionActionPerformed

    private void BtnCargarProcesosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnCargarProcesosActionPerformed

    }//GEN-LAST:event_BtnCargarProcesosActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BtnCargarProcesos;
    private javax.swing.JButton BtnIniciarSimulacion;
    private javax.swing.JPanel CrearProceso;
    private javax.swing.JButton botonConfirmarValores;
    private javax.swing.JButton botonCrear;
    private javax.swing.JButton button_loadFile;
    private javax.swing.JTextField fieldCiclos;
    private javax.swing.JTextField fieldCiclos2;
    private javax.swing.JTextField fieldDuracion;
    private javax.swing.JTextField fieldNombre;
    private javax.swing.JTextField fieldactiveCPU;
    private javax.swing.JTextField fieldinstructionCycle;
    private javax.swing.JTextPane fileChooserStateMessage;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JList<String> listCPU1;
    private javax.swing.JList<String> listCPU2;
    private javax.swing.JList<String> listCPU3;
    private javax.swing.JButton opcion1;
    private javax.swing.JButton opcion2;
    private javax.swing.JLabel txtActiveCPU1;
    private javax.swing.JLabel txtCPU1;
    private javax.swing.JLabel txtCPU2;
    private javax.swing.JLabel txtCPU3;
    private javax.swing.JLabel txtCiclo1;
    private javax.swing.JLabel txtCiclo2;
    private javax.swing.JLabel txtCiclo3;
    private javax.swing.JLabel txtCiclo4;
    private javax.swing.JLabel txtCrearProceso;
    private javax.swing.JLabel txtDuracion;
    private javax.swing.JLabel txtNombre;
    private javax.swing.JLabel txtinstructionCycle;
    // End of variables declaration//GEN-END:variables
}
